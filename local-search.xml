<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/27/%E5%AF%B9%E4%BA%8Esesstion%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2021/02/27/%E5%AF%B9%E4%BA%8Esesstion%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="对于sesstion和JWT的理解"><a href="#对于sesstion和JWT的理解" class="headerlink" title="对于sesstion和JWT的理解"></a>对于<code>sesstion</code>和JWT的理解</h1><h2 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h2><h4 id="一、主流的-Web-开发模式"><a href="#一、主流的-Web-开发模式" class="headerlink" title="一、主流的 Web 开发模式"></a>一、主流的 Web 开发模式</h4><ol><li><p><strong>基于客户端渲染的方式</strong></p></li><li><p><strong>基于服务端渲染的方式</strong></p></li></ol><h4 id="二、服务端渲染概念"><a href="#二、服务端渲染概念" class="headerlink" title="二、服务端渲染概念"></a>二、服务端渲染概念</h4><p>服务端直接把数据动态拼接到 HTML 字符串中, 再把完整的 HTML 页面数据发送给客户端, 这样浏览器就可以直接渲染 页面, 不需要进行 Ajax 请求的操作了</p><h4 id="三、服务端渲染的优点"><a href="#三、服务端渲染的优点" class="headerlink" title="三、服务端渲染的优点"></a>三、服务端渲染的优点</h4><ol><li><p>前端渲染更快, 用户体验更好 (不需要首次等待 Ajax 发送请求的过程)</p></li><li><p>有利于 <code>SEO</code> 搜索引擎读取权重词汇 (服务端响应的是完整带标签的 HTML 内容, 百度等爬虫更容器读取信息)</p></li></ol><h4 id="四、服务端渲染的缺点"><a href="#四、服务端渲染的缺点" class="headerlink" title="四、服务端渲染的缺点"></a>四、服务端渲染的缺点</h4><ol><li><p>需要额外的服务器资源, 以及完善的运维体系去管理</p></li><li><p>不利于前后端分离, 由于页面是在服务端进行输出的, 需要前端的代码和 <code>Node.js</code> 服务端部署在一起</p></li></ol><h2 id="前后端分离概念"><a href="#前后端分离概念" class="headerlink" title="前后端分离概念"></a>前后端分离概念</h2><h4 id="一、前后端分离的开发模式"><a href="#一、前后端分离的开发模式" class="headerlink" title="一、前后端分离的开发模式"></a>一、前后端分离的开发模式</h4><p>依赖于 Ajax 技术的广泛运用, 后端只负责提供<code>API </code>接口, 前端使用 Ajax 调用接口渲染页面的开发模式</p><h4 id="二、前后端分离的优点"><a href="#二、前后端分离的优点" class="headerlink" title="二、前后端分离的优点"></a>二、前后端分离的优点</h4><p>​      (1) 开发体验好, 各司其职, 效率更高</p><p>​      (2) 用户体验好, Ajax 可以在不刷新页面的情况下实现局部更新, 配合 loading 效果体验度较好</p><p>​      (3) 减轻服务端的渲染压力, 因为页面最终是在每个用户的浏览器中生成的</p><h4 id="三、前后端分离的缺点"><a href="#三、前后端分离的缺点" class="headerlink" title="三、前后端分离的缺点"></a>三、前后端分离的缺点</h4><p>​      (1) 前端渲染耗时长, 首屏渲染的体验度不高</p><p>​      (2) 不利用 <code>SEO</code> 搜索引擎优化</p><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><h4 id="一、身份认证技术"><a href="#一、身份认证技术" class="headerlink" title="一、身份认证技术"></a>一、身份认证技术</h4><p>​      身份认证(Authentication) 又叫 “鉴权”, “权限验证”, “身份验证”, 是指通过一定的手段, 完成用户身份的确认</p><p>​    例如: 火车票检票, 微信支付密码等生活场景,Web 开发中的邮箱验证, 短信验证码, 滑动验证码等方式</p><h4 id="二、为什么需要身份认证"><a href="#二、为什么需要身份认证" class="headerlink" title="二、为什么需要身份认证"></a>二、为什么需要身份认证</h4><p>​      网站的内容如果涉及到隐私性, 安全性 和 交易性, 即需要身份认证的机制来确保安全三、不同开发模式下的身份任证</p><p>​      (1) <strong>服务端渲染的推荐使用 Session 认证机制</strong></p><p>​      (2) <strong>前后端分离推荐使用<code>JWT</code>认证机制</strong></p><h2 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a>HTTP协议的无状态性</h2><h4 id="一、HTTP-协议的特点"><a href="#一、HTTP-协议的特点" class="headerlink" title="一、HTTP 协议的特点"></a>一、HTTP 协议的特点</h4><p>​      HTTP 本身是一个无状态的协议, 它不会记录每次发送请求的用户信息, 这会导致服务器无法识别哪个用户发送了请求</p><h4 id="二、如何解决上述的问题"><a href="#二、如何解决上述的问题" class="headerlink" title="二、如何解决上述的问题"></a>二、如何解决上述的问题</h4><p>​      <strong>可以借助 cookie 和 session 两种技术来存储用户的状态</strong></p><p>​    </p><h2 id="cookie的技术"><a href="#cookie的技术" class="headerlink" title="cookie的技术"></a>cookie的技术</h2><h4 id="一、什么是-Cookie"><a href="#一、什么是-Cookie" class="headerlink" title="一、什么是 Cookie?"></a>一、什么是 Cookie?</h4><p>​      Cookie 是存储在用户浏览器的一段不超过 4KB 的字符串, 它是由一个名称(Name) 和 值(Value) 以及其他几个,用于控制 Cookie 有效期, 安全性, 使用范围的可选属性组成的</p><h4 id="二、Cookie-的作用"><a href="#二、Cookie-的作用" class="headerlink" title="二、Cookie 的作用?"></a>二、Cookie 的作用?</h4><p>​      不用域名下的 Cookie 信息是独立的, 每当客户端发送请求时, 会自动把当前域名下所有未过期的 Cookie,添加到请求头, 一同发送到服务器</p><h4 id="三、Cookie-的特性五角星⭐⭐⭐⭐⭐"><a href="#三、Cookie-的特性五角星⭐⭐⭐⭐⭐" class="headerlink" title="三、Cookie 的特性五角星⭐⭐⭐⭐⭐"></a>三、Cookie 的特性五角星⭐⭐⭐⭐⭐</h4><p>​      <strong>(1) 自动发送</strong></p><p>​      <strong>(2) 域名独立</strong></p><p>​      <strong>(3) 过期时限</strong></p><p>​      <strong>(4) 4 KB限制</strong></p><h4 id="四、Cookie-的工作机制"><a href="#四、Cookie-的工作机制" class="headerlink" title="四、Cookie 的工作机制"></a>四、Cookie 的工作机制</h4><p>​      客户端(浏览器)第一次发送请求到服务器, 服务器会以响应头的形式向浏览器写入 Cookie 保存, 之后浏览器</p><p>​    每次发送请求到服务器都会自动将 Cookie 以请求头的形式发送过去</p><h4 id="五、Cookie-技术的缺点"><a href="#五、Cookie-技术的缺点" class="headerlink" title="五、Cookie 技术的缺点"></a>五、Cookie 技术的缺点</h4><p>  Cookie 是存储在浏览器端的, 并且浏览器本身提供了读写 Cookie 的方法, 因此 Cookie 信息很容易被窃取和伪造,重要的隐私信息不建议存放在 Cookie 中</p><h2 id="session的不足之处"><a href="#session的不足之处" class="headerlink" title="session的不足之处"></a>session的不足之处</h2><h4 id="一、Session-认证的局限性"><a href="#一、Session-认证的局限性" class="headerlink" title="一、Session 认证的局限性"></a>一、Session 认证的局限性</h4><p>​      SessionID 需要借助 cookie 手段存放在浏览器, 当涉及到前端跨域请求后端接口的时候, 需要做额外的配置才能实现 Session 的认证</p><h4 id="二、如何解决上述的缺点"><a href="#二、如何解决上述的缺点" class="headerlink" title="二、如何解决上述的缺点"></a>二、如何解决上述的缺点</h4><p>​      当前端跨域请求后端接口时, 推荐使用 JWT 这种认证方式, 没有和 Cookie 的绑定关系</p><h4 id="三、什么是-JWT-JSON-Web-Token"><a href="#三、什么是-JWT-JSON-Web-Token" class="headerlink" title="三、什么是 JWT (JSON Web Token)?"></a>三、什么是 JWT (JSON Web Token)?</h4><p>​      基于token的鉴权机制, 是前端目前最流行的跨域认证解决方案</p><h2 id="JWT的工作机制"><a href="#JWT的工作机制" class="headerlink" title="JWT的工作机制"></a>JWT的工作机制</h2><h4 id="一、JWT-的认证机制"><a href="#一、JWT-的认证机制" class="headerlink" title="一、JWT 的认证机制"></a>一、JWT 的认证机制</h4><p>​      用户信息通过加密签名后 token 字符串的形式, 保存在客户端浏览器中. 服务器通过解密客户端传来的 token 字符串来认证用户的身份</p><h5 id="二、JWT-的组成部分"><a href="#二、JWT-的组成部分" class="headerlink" title="二、JWT 的组成部分"></a>二、JWT 的组成部分</h5><p>​      通常由三部分组成, 使用英文符号.进行分隔: Header.Payload.Signature</p><p>​      <strong>Header: 头部</strong></p><p>​      <strong>Payload: 有效荷载, 这里存放的是经过加密后的用户信息</strong></p><p>​      <strong>Signature: 签名</strong></p><h4 id="三、JWT-使用方式"><a href="#三、JWT-使用方式" class="headerlink" title="三、JWT 使用方式"></a>三、JWT 使用方式</h4><p>​      服务端签发 TOKEN 到客户端后, 可以存储到 localStorage 中, 每次发送请求前都要带上这个 TOKEN, 推荐放在HTTP 请求头的 Authorization 字段中 (大事件项目中处理方式一致)</p><p>​    </p><h4 id="在-Node-js项目中使用-JWT"><a href="#在-Node-js项目中使用-JWT" class="headerlink" title="在 Node.js项目中使用 JWT:"></a>在 Node.js项目中使用 JWT:</h4><ol><li>先安装 JWT 包</li></ol><p>​    <code>npm  i jsonwebtoken express-jwt</code></p><p>​    说明: jsonwebtoken 用于生成 Token 字符串信息; express-jwt 用于把 Token 字符串解析为 JSON 对象</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/24/SQL%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/SQL%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p><strong>查询表单列的数据:</strong>        *<em>select * from 表名*</em></p><p><strong>向表单插入一条数据:</strong>    <strong>insert into 表名 (需要修改的列名1,需要修改的列名1) values (修改的值1,修改的值2)</strong>   <strong>(注意键值需要一一对应)</strong></p><p><strong>更新表单数据:</strong>    <strong>update 表名 set  列名=’值’ where id=2 (修改id为2的数据)</strong></p><p><strong>删除表单数据</strong>:        <strong>delete from 表名 where id =1 (删除id为1的数据)</strong></p><p><strong>常见运算符:</strong>        </p><ol><li><strong><code>&gt;</code>和&gt;= (大于,大于等于)</strong></li><li><strong>&lt;和&lt;=(小于,小于等于)</strong></li><li><strong>!=或&lt;&gt; (不等于,推荐使用!=)</strong></li><li><strong>= (等于)</strong></li><li><strong>between(在什么什么之间)例:1and 10, 1和10之间</strong></li><li><strong>like (像什么什么)例:%123 ,包含123的数据 ** (</strong>%表示任意字符** )</li></ol><p><strong>AND 和 OR 运算符</strong>:</p><p>可以在 where 子句中把多个条件结合起来, <strong>and表示并且</strong>, <strong>or表示或者的意思</strong></p><p><strong>升序和降序:</strong></p><p><strong>默认的排序方式为升序 ASC**</strong>, 如果使用<strong>降序可以添加 DESC 关键字</strong></p><p>*<em>降序:    select * from 表名 order by id desc*</em></p><p><strong>升序:</strong>    *<em>select * from 表名 order by id asc*</em>(asc可以省略)</p><p><strong>where语句:</strong></p><p>WHERE 子句的作用:     如果需要有条件的从表中选取数据, 可以使用 WHERE 子句添加到 SQL 语句的末尾</p><p><strong>例如:</strong>     *<em>select * form 表名称 where 列名称 运算符 值*</em></p><p><strong>注意:</strong>    同时使用 oreder by 和 where子句时, 应该让 <strong>oreder by 位于 where 之后</strong>, 否则将会产生错误</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <url>/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM对象和jq对象互换"><a href="#DOM对象和jq对象互换" class="headerlink" title="DOM对象和jq对象互换"></a>DOM对象和jq对象互换</h1><ol><li>把单个  jq 对象转成原生的 DOM 对象: jq对象[0] 或 jq对象.get(0)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]);<br><br>      <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;div&#x27;</span>).get(<span class="hljs-number">0</span>));<br><br>      <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;li&#x27;</span>)[<span class="hljs-number">0</span>]);<span class="hljs-comment">//结果:得到原生dom元素,第一个li标签</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>把原生的 DOM 对象转成 jq 对象:  $(dom对象)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>)<br>      <span class="hljs-built_in">console</span>.log($(div).hide()); <span class="hljs-comment">//注意:这里的div是变量,不加引号</span><br></code></pre></td></tr></table></figure><h1 id="jquery的选择器"><a href="#jquery的选择器" class="headerlink" title="jquery的选择器"></a>jquery的选择器</h1><ol><li><p>根据类名来获取元素</p></li><li><p>根据 id 来获取元素</p></li><li><p>根据标签名来获取元素</p></li><li><p>根据子代选择器获取元素</p></li><li><p>根据后代选择器获取元素</p></li><li><p>属性选择器</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>        &lt;li&gt;hello1&lt;/li&gt;<br>        &lt;li&gt;hello2&lt;/li&gt;<br>        &lt;li&gt;hello3&lt;/li&gt;<br>        &lt;li&gt;<br>            &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;current&quot;</span>&gt;hello&lt;/span&gt;<br>        &lt;/li&gt;<br>    &lt;/ul&gt;<br>    <br>       $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 1. 根据类名来获取元素</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.box&#x27;</span>));<br><br>            <span class="hljs-comment">// 2. 根据 id 来获取元素</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;#foo&#x27;</span>));<br><br>            <span class="hljs-comment">// 3. 根据标签名来获取元素</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;ul&#x27;</span>));<br><br>            <span class="hljs-comment">// 4. 根据子代选择器获取元素</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;ul&gt;li&#x27;</span>));<br><br>            <span class="hljs-comment">// 5. 根据后代选择器获取元素</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;ul .current&#x27;</span>));<br><br>            <span class="hljs-comment">// 6. 属性选择器</span><br>            <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;[name=uname]&#x27;</span>));<br><br>        &#125;)<br></code></pre></td></tr></table></figure><h1 id="jquery筛选选择器"><a href="#jquery筛选选择器" class="headerlink" title="jquery筛选选择器"></a>jquery筛选选择器</h1><p>注意是放在$(‘jq选择器’)里面进行使用</p><p>1.获取第一个子元素   jq选择器:first</p><p>2.获取最后一个子元素 jq选择器:last</p><p>3.获取第index个子元素 jq选择器:qe(index)(这里index指具体的索引号)</p><p>4.获取索引号为奇数元素  jq选择器:odd</p><p>5.获取索引号为偶数元素 jq选择器:even</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>       &lt;span&gt;hello1&lt;/span&gt;<br>       &lt;span&gt;hello2&lt;/span&gt;<br>       &lt;span&gt;hello3&lt;/span&gt;<br>       &lt;span&gt;hello4&lt;/span&gt;<br>   &lt;/div&gt; <br><span class="hljs-comment">// 1. 获取第一个子元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;span:first&#x27;</span>));<br><br>       <span class="hljs-comment">// 2. 获取最后一个子元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;span:last&#x27;</span>));<br><br>       <span class="hljs-comment">// 3. 获取第 index 个子元素 (jq 当中元素的索引 index 从 0 开始)</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;span:eq(1)&#x27;</span>));<br><br>       <span class="hljs-comment">// 4. 获取索引号为奇数 odd的元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;span:odd&#x27;</span>));<br><br>       <span class="hljs-comment">// 5. 获取索引号为偶数 even 的元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;span:even&#x27;</span>));<br></code></pre></td></tr></table></figure><h1 id="jquery事件绑定"><a href="#jquery事件绑定" class="headerlink" title="jquery事件绑定"></a>jquery事件绑定</h1><p>jq事件绑定:jq对象.事件名(function(){})</p><p>注意:</p><p>1.事件名称不用加on(onclick直接写click其他同理)</p><p>2.在jq的事件处理函数中this指向原生的DOM元素(自身没有this指向,回获取外层的this指向)</p><p>3.jq的事件处理函数中不推荐使用es6中的箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;/div&gt;<br>       <span class="hljs-comment">// 需求: 鼠标经过 div 盒子隐藏</span><br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).mouseover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//在jq的事件处理函数中,this指向原生的DOM元素</span><br>           <span class="hljs-comment">// this.style.display = &#x27;none&#x27;</span><br>           $(<span class="hljs-built_in">this</span>).hide()<br>       &#125;);<br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).mouseout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">this</span>.style.display = <span class="hljs-string">&#x27;block&#x27;</span><br>       &#125;);<br>       <span class="hljs-comment">// jquery 的事件处理函数中推荐使用 es6 中的箭头函数</span><br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).click(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)) <span class="hljs-comment">//这里的this指向window</span><br><br></code></pre></td></tr></table></figure><h1 id="jquery获取元素的筛选反方式-父元素-后代元素…-等"><a href="#jquery获取元素的筛选反方式-父元素-后代元素…-等" class="headerlink" title="jquery获取元素的筛选反方式(父元素,后代元素….等)"></a>jquery获取元素的筛选反方式(父元素,后代元素….等)</h1><p>1.获取父元素  $(‘选择的元素’).parent()</p><p>2.获取指定的祖先元素 $(‘选择的元素’).parents(‘具体的父级或父级的父级’)</p><p>3.获取所有的子元素 $(‘选择的元素’).childern()</p><p>4.获取所有的后代元素(包括子孙元素) $(‘选择的元素’).find(‘选择的元素’)</p><p>5.获取所有的兄弟元素(不包括自己) $(‘选择的元素’).siblings()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>       &lt;ul&gt;<br>           &lt;li&gt;hello1&lt;/li&gt;<br>           &lt;li&gt;hello2&lt;/li&gt;<br>           &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;hello3&lt;/li&gt;<br>           &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;hello4&lt;/li&gt;<br>           &lt;li&gt;hello5&lt;/li&gt;<br>       &lt;/ul&gt;<br>       &lt;div&gt;<br>           &lt;div&gt;<br>               &lt;h3 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;hello&lt;/h3&gt;<br>               &lt;h3 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;hello&lt;/h3&gt;<br>               &lt;h3 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;hello&lt;/h3&gt;<br>           &lt;/div&gt;<br>       &lt;/div&gt;<br>   &lt;/div&gt;<br><br><br>       <span class="hljs-comment">// 1. 获取父元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;ul&#x27;</span>).parent());<br><br>       <span class="hljs-comment">// 2. 获取指定元素的祖先元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;ul&#x27;</span>).parents(<span class="hljs-string">&#x27;body&#x27;</span>));<br><br>       <span class="hljs-comment">// 3. 获取所有的子元素</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;ul&#x27;</span>).children());<br><br>       <span class="hljs-comment">// 4. 查找获取所有的后代元素（包括子孙元素）</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.box&#x27;</span>).find(<span class="hljs-string">&#x27;.foo&#x27;</span>));<br><br>       <span class="hljs-comment">// 4. 获取所有的兄弟元素（不包括自己）</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.bar&#x27;</span>).siblings(<span class="hljs-string">&#x27;.foo&#x27;</span>));<br><br>       <span class="hljs-comment">// 注意：以上方法的小括号中都可以使用 jq 的选择器字符串</span><br><br></code></pre></td></tr></table></figure><p>1.获取上一个元素  $(‘选择的元素’).prev()</p><p>2.获取前面的所有元素  $(‘选择的元素’).prevAll()</p><p>3.获取下一个元素 $(‘选择的元素’).next()</p><p>4.获取后面所有的元素 $(‘选择的元素’).nextAll()</p><p>5.判断某个元素是否包含某个特定的类名  $(‘选择的元素’).hasclass  返回值是布尔值</p><p>6.获取第n个元素 $(‘选择的元素’).eq(n)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>        &lt;li&gt;hello1&lt;/li&gt;<br>        &lt;li&gt;hello2&lt;/li&gt;<br>        &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;hello3&lt;/li&gt;<br>        &lt;li&gt;hello4&lt;/li&gt;<br>        &lt;li&gt;hello5&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 获取上一个元素</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.foo&#x27;</span>).prev());<br><br>        <span class="hljs-comment">// 2. 获取前面所有的元素</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.foo&#x27;</span>).prevAll());<br><br>        <span class="hljs-comment">// 3. 获取下一个元素</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.foo&#x27;</span>).next());<br><br>        <span class="hljs-comment">// 4. 获取后面所有的元素</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.foo&#x27;</span>).nextAll());<br><br>        <span class="hljs-comment">// 3. 判断某个元素是否包含某个特定的类名</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.foo&#x27;</span>).hasClass(<span class="hljs-string">&#x27;abc&#x27;</span>)); <span class="hljs-comment">//有返回true,没有返回false</span><br><br>        <span class="hljs-comment">// 4. (重要) 获取第 n 个子元素 （元素索引 n 从 0 开始）</span><br>        <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;li&#x27;</span>).eq(<span class="hljs-number">3</span>));<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="jquery中css修改样式"><a href="#jquery中css修改样式" class="headerlink" title="jquery中css修改样式"></a>jquery中css修改样式</h1><p>1.获取 css 样式属性值: css(‘属性名’)</p><p>2.修改 css 单个样式属性: css(‘属性名’, ‘属性值’)</p><p> 注意：（1） 属性名一定要加 引号 （2）数字型的属性值可以省略单位 px和引号</p><ol start="3"><li><p>修改 css 多个样式属性: css({</p><pre><code>                                              属性名 1：&#39;属性值 1&#39;,</code></pre><p>​                                                   属性名 2：’属性值 2’</p><pre><code>                                            &#125;)</code></pre></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;Hello&lt;/div&gt;<br>       <span class="hljs-comment">// 1. 获取 css 样式属性值: css(&#x27;属性名&#x27;)</span><br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.box&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>));<br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.box&#x27;</span>).css(<span class="hljs-string">&#x27;height&#x27;</span>));<br>       <span class="hljs-built_in">console</span>.log($(<span class="hljs-string">&#x27;.box&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>));<br><br>       <span class="hljs-comment">// 2. 修改 css 单个样式属性: css(&#x27;属性名&#x27;, &#x27;属性值&#x27;)</span><br>       <span class="hljs-comment">// 注意：（1） 属性名一定要加 引号 （2）数字型的属性值可以省略单位 px和引号</span><br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-number">300</span>)<br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).css(<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-number">300</span>)<br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)<br><br>       <span class="hljs-comment">// 3. 修改 css 多个样式属性: css(&#123;</span><br>       <span class="hljs-comment">//    属性名 1：&#x27;属性值 1&#x27;,</span><br>       <span class="hljs-comment">//    属性名 2：&#x27;属性值 2&#x27;</span><br>       <span class="hljs-comment">// &#125;)</span><br>       $(<span class="hljs-string">&#x27;.box&#x27;</span>).css(&#123;<br>           width: <span class="hljs-number">300</span>,<br>           height: <span class="hljs-number">300</span>,<br>           backgroundColor: <span class="hljs-string">&#x27;red&#x27;</span>,<br>           borderRadius: <span class="hljs-string">&#x27;100%&#x27;</span><br>       &#125;)<br><br></code></pre></td></tr></table></figure><h1 id="jquery中css类名修改"><a href="#jquery中css类名修改" class="headerlink" title="jquery中css类名修改"></a>jquery中css类名修改</h1><ol><li><p>添加类名 addClass()</p></li><li><p>移除类名 removeClass()</p></li><li><p>切换类名 toggleClass() 含义: 让类名从有到无，或从无到有</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;hello&lt;/div&gt;<br>    &lt;button&gt;添加类名&lt;/button&gt;<br>    &lt;button&gt;移除类名&lt;/button&gt;<br>    &lt;button&gt;切换类名&lt;/button&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 添加类名 addClass()</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).addClass(<span class="hljs-string">&#x27;red&#x27;</span>)<br>        &#125;)<br><br>        <span class="hljs-comment">// 2. 移除类名 removeClass()</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).removeClass(<span class="hljs-string">&#x27;red&#x27;</span>)<br>        &#125;)<br><br>        <span class="hljs-comment">// 3. 切换类名 toggleClass() 含义: 让类名从有到无，或从无到有</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).toggleClass(<span class="hljs-string">&#x27;red&#x27;</span>)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h1 id="jquery中的动画效果"><a href="#jquery中的动画效果" class="headerlink" title="jquery中的动画效果"></a>jquery中的动画效果</h1><h4 id="显示和隐藏效果"><a href="#显示和隐藏效果" class="headerlink" title="显示和隐藏效果"></a>显示和隐藏效果</h4><p>1.显示某个元素  <strong>show()</strong></p><p>2.隐藏某个元素<strong>hide()</strong></p><p>3切换显示和隐藏某个元素 <strong>toggle()</strong></p><h4 id="上滑和下拉效果"><a href="#上滑和下拉效果" class="headerlink" title="上滑和下拉效果"></a>上滑和下拉效果</h4><p>1.下拉显示某个元素 <strong>sildeDown()</strong></p><p>2.上拉隐藏某个元素 <strong>slideUp()</strong></p><p>3.切换上拉显示下拉隐藏元素 <strong>slideToggle()</strong></p><p><strong>4.鼠标经过和离开的切换事件 hover()</strong></p><p><strong>注意:如果只写一个function,鼠标经过和鼠标离开都会调用这个处理函数</strong></p><h4 id="淡出和淡入效果"><a href="#淡出和淡入效果" class="headerlink" title="淡出和淡入效果"></a>淡出和淡入效果</h4><p>1.缓慢显示某个元素（淡入, 显示元素） fadeIn()</p><p>2.缓慢隐藏某个元素（淡出, 隐藏元素） fadeOut()</p><p>3.切换淡入和淡出效果 fadeToggle()</p><p>4.让元素过渡到指定的透明度 fadeTo(speed, opacity, [easing], [callback])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;button&gt;淡入&lt;/button&gt;<br>    &lt;button&gt;淡出&lt;/button&gt;<br>    &lt;button&gt;切换&lt;/button&gt;<br>    &lt;button&gt;指定透明度&lt;/button&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><br>    &lt;script&gt;<br>        <span class="hljs-comment">// js 动画效果</span><br>        <span class="hljs-comment">// 1. 缓慢显示某个元素（淡入, 显示元素） fadeIn()</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).fadeIn()<br>        &#125;);<br>        <span class="hljs-comment">// 2. 缓慢隐藏某个元素（淡出, 隐藏元素） fadeOut()</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).fadeOut()<br>        &#125;);<br>        <span class="hljs-comment">// 3. 切换淡入和淡出效果 fadeToggle()</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).stop().fadeToggle()<br>        &#125;);<br><br>        <span class="hljs-comment">// 4. 让元素过渡到指定的透明度 fadeTo(speed, opacity, [easing], [callback])</span><br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">3</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).fadeTo(<span class="hljs-number">400</span>, <span class="hljs-number">.5</span>)<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><h4 id="自定义动画下过-animate"><a href="#自定义动画下过-animate" class="headerlink" title="自定义动画下过 animate"></a>自定义动画下过 animate</h4><p>​        语法： animate(动画对象, [speed], [easing], [callback])</p><p>​        参数：</p><p>​        (1) 动画对象: 指定要进行动画的css属性, 属性名必须遵循驼峰式命名, 属性值一般只支持数字型的</p><p>​        (3) speed: 动画的时长</p><p>​        (4) easing: 动画的速度曲线</p><p>​        (5) callback: 动画执行完成后的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;button&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            $(<span class="hljs-string">&#x27;.box&#x27;</span>).animate(&#123;<br>                width: <span class="hljs-number">200</span>,<br>                height: <span class="hljs-number">200</span>,<br>                left: <span class="hljs-number">500</span>,<br>                top: <span class="hljs-number">300</span>,<br>                fontSize: <span class="hljs-number">30</span>,<br>                borderRadius: <span class="hljs-string">&#x27;100%&#x27;</span><br>            &#125;, <span class="hljs-number">2000</span>)<br>        &#125;)<br></code></pre></td></tr></table></figure><h1 id="stop的使用"><a href="#stop的使用" class="headerlink" title="stop的使用:"></a>stop的使用:</h1><h4 id="因为-jq封装的动画同时调用时会有一个排队效果-每次的动画必须要完成全过程-使用会导致动画一直触发"><a href="#因为-jq封装的动画同时调用时会有一个排队效果-每次的动画必须要完成全过程-使用会导致动画一直触发" class="headerlink" title="因为:jq封装的动画同时调用时会有一个排队效果,每次的动画必须要完成全过程,使用会导致动画一直触发"></a>因为:jq封装的动画同时调用时会有一个排队效果,每次的动画必须要完成全过程,使用会导致动画一直触发</h4><h4 id="解决方法-使用stop-方法可以解决动画排队的问题-使得每次只有一个动画在执行"><a href="#解决方法-使用stop-方法可以解决动画排队的问题-使得每次只有一个动画在执行" class="headerlink" title="解决方法:使用stop()方法可以解决动画排队的问题,使得每次只有一个动画在执行"></a>解决方法:使用stop()方法可以解决动画排队的问题,使得每次只有一个动画在执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           $(<span class="hljs-string">&#x27;.nav&gt;li&#x27;</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               $(<span class="hljs-built_in">this</span>).children(<span class="hljs-string">&#x27;ul&#x27;</span>).stop().slideToggle()<br>           &#125;)<br><br>       &#125;)<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/23/jquery%E6%80%BB%E7%BB%93%E5%85%AD/"/>
    <url>/2021/02/23/jquery%E6%80%BB%E7%BB%93%E5%85%AD/</url>
    
    <content type="html"><![CDATA[<p><strong>面向对象编程(opp)</strong>:把一个功能分成一个个对象,再通过这一个个对象之间的分工合作来完成</p><p>  面向对:易于维护、拓展，耦合性低；适用场景：多人合作的复杂项目</p><p>  面向过程：不易于维护、拓展，耦合性高；适用场景：简单的功能模块</p><h4 id="创建类和生成实例-ES-6中用class声明创建一个基于原型继承的具有指定名称的类"><a href="#创建类和生成实例-ES-6中用class声明创建一个基于原型继承的具有指定名称的类" class="headerlink" title="创建类和生成实例:ES 6中用class声明创建一个基于原型继承的具有指定名称的类"></a><strong>创建类和生成实例</strong>:ES 6中用class声明创建一个基于原型继承的具有指定名称的类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>        <span class="hljs-comment">// 构造函数: 定义公共的属性</span><br>        <span class="hljs-title">constructor</span> (<span class="hljs-params">参数</span>) &#123; <br>          <span class="hljs-built_in">this</span>.属性名 = 属性值<br>        &#125;<br><br>        <span class="hljs-comment">// 类方法: 定义公共的行为</span><br>        方法名<span class="hljs-number">1</span> (参数) &#123;  &#125;<br>        方法名<span class="hljs-number">2</span> (参数) &#123;  &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li><p>class 创建的类首字母还是要大写</p></li><li><p>类中的 constructor 构造函数, 接收 new 创建对象传递的参数，并返回实例对象（return this）</p></li><li><p>new 一个类时，自动调用构造函数方法，但不会自动调用类方法</p></li><li><p>类中的构造函数 和 类方法不需要加 function （重点）</p></li><li><p>多个类方法之间不需要使用逗号隔开 (重点)</p></li></ol><p><strong>类继承extends和super关键字</strong>:</p><ol><li>定义一个类（子类）通过 extends 继承父类上的方法和属性</li></ol><p>​    class 子类名 extends 父类 {}</p><ol start="2"><li>super 关键字可以访问和调用父类上的函数，包括构造函数和类方法</li></ol><p><strong>注意</strong>：</p><p>​    （1）子类调用方法时的查找顺序：先从子类上找再从父类上找(先找自身,自身没有找父类)</p><p>​    （2）super 作为一个函数，可以调用父类的构造函数；作为一个对象，可以调用父类的方法</p><p>​       (3) 子类可以调用父类的方法属性,父类不可以调用子类的方法和属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span></span>&#123;<span class="hljs-comment">//类中所有的函数方法都不需要写function关键字</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age,height</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name<br>        <span class="hljs-built_in">this</span>.age=age<br>        <span class="hljs-built_in">this</span>.height=height<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">buy</span>(<span class="hljs-params">book</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&#x27;买了一本&#x27;</span>+book)<br>    &#125;<span class="hljs-comment">//类上的公共方法之间不可以用逗号分隔</span><br>    <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">People</span> // &lt;</span>==子类用<span class="hljs-keyword">extends</span>和父类连接,默认会继承父类上的构造方法和类方法<br>&#123;    <br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, height</span>)</span> &#123;  <br>        <span class="hljs-comment">//必须要使用super()函数,才可以调用父类的属性</span><br>         <span class="hljs-built_in">super</span>(name, age, height)<br>     &#125;<br>    <span class="hljs-function"><span class="hljs-title">intro</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>.say() <span class="hljs-comment">// &lt;===super 的第二个用法, 可以直接去调用父类上的方法</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好, 我是&#x27;</span> + <span class="hljs-built_in">this</span>.name)<br>     &#125;<br>&#125;<br><span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">160</span>)<span class="hljs-comment">//&lt;==可以调用父类的属性</span><br>xm.intro()<span class="hljs-comment">//&lt;==调用父类的方法</span><br></code></pre></td></tr></table></figure><p><strong>super必须放在this之前</strong>:</p><p> 子类中注意的两点：</p><p>1.子类中使用 this 之前，必须要先调用 super</p><p>2.子类可以拓展自己的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构建父类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;<br>                <span class="hljs-built_in">this</span>.x = x<br>                <span class="hljs-built_in">this</span>.y = y<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 子类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">a, b, c</span>)</span> &#123;<br>                <span class="hljs-built_in">super</span>(a, b)<span class="hljs-comment">// 直接去调用父类的构造函数, 并把实参传过去的</span><br>                <span class="hljs-built_in">this</span>.z = c   <span class="hljs-comment">// 这是子类单独的属性, 不是父类上的</span><br>                <span class="hljs-comment">// this 指向创建出来的对象</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>            &#125;<br>            <span class="hljs-comment">// 这个子类单独的类方法, 不是父类上的</span><br>            <span class="hljs-function"><span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y + <span class="hljs-built_in">this</span>.z) <span class="hljs-comment">// 求出 x,y,z 三个数的和</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 创建对象: new 类名(参数)</span><br>        <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br>        <span class="hljs-built_in">console</span>.log(obj) <span class="hljs-comment">// &#123;x: 10, y: 20&#125;</span><br><br>        <span class="hljs-comment">// 对象在访问类方法的时候, 先去看子类上有没有这个方法, 没有再去找父类上的</span><br>        obj.getSum() <span class="hljs-comment">// 60</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%BA%94/"/>
    <url>/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="let关键字声明变量-⭐⭐⭐"><a href="#let关键字声明变量-⭐⭐⭐" class="headerlink" title="let关键字声明变量(⭐⭐⭐)"></a>let关键字声明变量(⭐⭐⭐)</h1><p> 一、let 作用</p><p>​      用来声明一个有块级作用域的变量，使用方法和 var 一样</p><h3 id="二、let-定义变量的特点"><a href="#二、let-定义变量的特点" class="headerlink" title="二、let 定义变量的特点"></a><strong>二、let 定义变量的特点</strong></h3><ol><li><p><strong>只在声明时的块或子块中可用</strong></p></li><li><p><strong>不存在变量提升，只能先声明再使用</strong></p></li><li><p><strong>存在“暂存死区”</strong></p></li><li><p><strong>同一作用域下不能重复声明同一变量</strong></p></li><li><p><strong>声明的变量不会挂载在 window 对象上</strong> </p></li></ol><p>​    三、暂时性死区的本质</p><p>​      只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，</p><p>​      只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><p><strong>使用场景</strong>:使用 let 关键字声明<strong>变化的量</strong></p><h1 id="const关键字声明变量-⭐⭐⭐"><a href="#const关键字声明变量-⭐⭐⭐" class="headerlink" title="const关键字声明变量(⭐⭐⭐)"></a><code>const</code>关键字声明变量(⭐⭐⭐)</h1><p>一、<code>const</code> 作用</p><p>​      用来声明一个有块级作用域的常量(内存地址不能变化的量)</p><h3 id="二、const-定义常量的特点"><a href="#二、const-定义常量的特点" class="headerlink" title="二、const 定义常量的特点"></a>二、<code>const </code>定义常量的特点</h3><ol><li><p><strong>声明常量时必须要初始化值</strong>(就是<code>const</code>声明变量的时候必须要赋值,不可以像var<code> num</code>这样)</p></li><li><p><strong>同样具有块级作用域和“暂存死区”</strong></p></li><li><p><strong>赋值为简单数据类型时，不能直接修改值</strong></p></li><li><p><strong>赋值为复杂数据类型时，可以修改对象内部的属性和方法</strong></p></li></ol><p><strong>使用场景</strong>:优先使用 <code>const</code>关键字<strong>声明固定不变的量</strong></p><h1 id="解构赋值两种情况-⭐⭐⭐"><a href="#解构赋值两种情况-⭐⭐⭐" class="headerlink" title="解构赋值两种情况(⭐⭐⭐)"></a>解构赋值两种情况(⭐⭐⭐)</h1><h4 id="需要数组或对象的值的时候可以不需要遍历来获取"><a href="#需要数组或对象的值的时候可以不需要遍历来获取" class="headerlink" title="(需要数组或对象的值的时候可以不需要遍历来获取)"></a>(需要数组或对象的值的时候可以不需要遍历来获取)</h4><h2 id="一、数组解构赋值"><a href="#一、数组解构赋值" class="headerlink" title="一、数组解构赋值"></a>一、数组解构赋值</h2><p>1、解构赋值（强大）</p><p>​      可以从数组或对象中，把值取出来，再赋值给对应的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">let</span> [a, b, c, d] = arr<br>        <span class="hljs-built_in">console</span>.log(a, b, c, d);<span class="hljs-comment">//这里的值和变量一一对应</span><br></code></pre></td></tr></table></figure><p>2、对数组进行解构</p><p>​      let [a, b, …] = 数组</p><p>​      使用变量名和对应位置的数组元素一一匹配，匹配成功就把元素赋值给变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> [a, b, c] = arr<br>       <span class="hljs-built_in">console</span>.log(a, b, c);<span class="hljs-comment">//2,3,4,5</span><br><br>       <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">2</span>]<span class="hljs-comment">//声明一个新变量</span><br>       <span class="hljs-keyword">let</span> [foo, bar] = arr2<br>       <span class="hljs-built_in">console</span>.log(foo, bar);<span class="hljs-comment">//结果为  (2, undefined)因为值和变量一一对应,所有没有值的变量结果为undefined</span><br></code></pre></td></tr></table></figure><p>3、使用注意</p><p>​      (1) 没有解构成功的变量，值为 undefined</p><p>​      (2) 变量的位置和数组中值的位置一一对应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> [, a1, b1] = arr<span class="hljs-comment">//按照变量对应值,第一个为空,a1对应3,b1对应4</span><br><span class="hljs-built_in">console</span>.log(a1, b1); <span class="hljs-comment">//3,4</span><br></code></pre></td></tr></table></figure><p>交换两个变量例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-number">20</span>;<br>[num1, num2] = [num2, num1]<br><span class="hljs-built_in">console</span>.log(num1, num2);<br></code></pre></td></tr></table></figure><h2 id="二、对象解构赋值"><a href="#二、对象解构赋值" class="headerlink" title="二、对象解构赋值"></a>二、对象解构赋值</h2><p>1、对对象进行解构</p><p>​      let {<code>prop1</code>, <code>prop2</code>, …} = 对象</p><p>​      使用<strong>变量名和对象中的属性名进行一一匹配</strong>，<strong>匹配成功就把对象的属性值赋值给变量</strong></p><p>2、使用注意</p><p>​      (1) <strong>没有解构成功的变量，值为 undefined</strong>(变量没有对应的值的时候返回<code>undefind</code>)</p><p>​      (2) <strong>变量的名称和属性名一一对应</strong></p><p>​      (3) <strong>变量名的顺序和数量没有要求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            age: <span class="hljs-number">18</span>,<br>            height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>            weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>        &#125;;<br><span class="hljs-keyword">let</span> &#123;name,age,height,weight,&#125; = obj<br> <span class="hljs-built_in">console</span>.log(name, age, height, weight);<span class="hljs-comment">// 张三 18 175cm 65kg</span><br> <span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">//没有这个值就返回undefined</span><br></code></pre></td></tr></table></figure><h4 id="对象解构赋值别名"><a href="#对象解构赋值别名" class="headerlink" title="对象解构赋值别名"></a>对象解构赋值别名</h4><p>1.原变量名:新变量名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            age: <span class="hljs-number">18</span>,<br>            height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>            weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>        &#125;;<br> <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: name1,age&#125; = obj<span class="hljs-comment">//左边的name 只用来进行属性名的匹配,:后面才是真正赋值的变量</span><br>        <span class="hljs-built_in">console</span>.log(name1); <span class="hljs-comment">//此时没有name这个键值对,name1:&#x27;张三&#x27;,此时已经改变属性名</span><br></code></pre></td></tr></table></figure><h1 id="箭头函数-⭐⭐⭐"><a href="#箭头函数-⭐⭐⭐" class="headerlink" title="箭头函数(⭐⭐⭐)"></a>箭头函数(⭐⭐⭐)</h1><p>一、<strong>箭头函数表达式 （简洁）</strong></p><p>​      <strong>() =&gt; {}</strong> </p><p>二、<strong>箭头函数的特点</strong></p><ol><li><p>一般不会单独使用, 可以当做匿名函数进行赋值 \ 传参 \ 返回值</p></li><li><p>如果<strong>函数体只有一行代码</strong>，并<strong>代码执行结果就是返回值,</strong> 可以<strong>同时省略大括号和 return</strong></p></li><li><p><strong>如果形参只有一个, 可以省略小括号</strong></p></li><li><p>内部没有 arguments 这个内置对象</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 筛选出数组中所有的偶数</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>        <span class="hljs-keyword">var</span> newArr = arr2.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><p>三、(★★★) 箭头函数没有自己的 this, 它里面的 this 指向箭头函数所处位置的 this(就是箭头函数这个函数没有this指向,取外层的this)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> resFn = fn.call(obj)<span class="hljs-comment">//这里用了call方法,指向了obj,所有箭头函数的this也指向obj,如果没用call那么是window</span><br>        resFn()<br></code></pre></td></tr></table></figure><h1 id="剩余参数-⭐⭐⭐"><a href="#剩余参数-⭐⭐⭐" class="headerlink" title="剩余参数(⭐⭐⭐)"></a>剩余参数(⭐⭐⭐)</h1><p>一、<strong>剩余参数语法(…变量名):</strong> 允许我们将剩下的所有参数表示为一个数组(把剩余参数封装成一个数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, ...rest</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">//这里a代表1</span><br>           <span class="hljs-built_in">console</span>.log(rest); <span class="hljs-comment">//这里我们获取到剩下所有实参组成的数组即 2,3,4</span><br>       &#125;<br>       fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>例一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 用来计算多个数的和 (1, 2, 3, 4, 5)</span><br>      <span class="hljs-keyword">const</span> getSum = <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> &#123;<span class="hljs-comment">//这里的...rest代表了getsum里所有的参数</span><br>          <span class="hljs-keyword">let</span> Sun = <span class="hljs-number">0</span><br>          rest.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> Sun += item)<br>          <span class="hljs-built_in">console</span>.log(Sun);<br><br>      &#125;<br>      getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>例二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>]<br> <span class="hljs-comment">//  把数组中剩下的元素组成新的数组</span><br>        <span class="hljs-keyword">let</span> [foo, bar, ...rest1] = arr<br>        <span class="hljs-built_in">console</span>.log(foo, bar); <span class="hljs-comment">//&#x27;red&#x27;&#x27;orange&#x27;</span><br>        <span class="hljs-built_in">console</span>.log(rest1); <span class="hljs-comment">//剩余元素组成的新数组就是[&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span><br></code></pre></td></tr></table></figure><p>例三</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            height: <span class="hljs-string">&#x27;170cm&#x27;</span>,<br>            weight: <span class="hljs-string">&#x27;135kg&#x27;</span>,<br>        &#125;<br><span class="hljs-comment">//  把对象剩下的属性组成一个新对象</span><br>        <span class="hljs-keyword">let</span> &#123;<br>            age,<br>            ...rest2<br>        &#125; = obj<br>        <span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">//12</span><br>        <span class="hljs-built_in">console</span>.log(rest2); <span class="hljs-comment">//除了age以外所有的属性组成的新对象</span><br></code></pre></td></tr></table></figure><p>例四</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            height: <span class="hljs-string">&#x27;170cm&#x27;</span>,<br>            weight: <span class="hljs-string">&#x27;135kg&#x27;</span>,<br>        &#125;<br><span class="hljs-comment">// 使用剩余参数快速实现浅拷贝</span><br>        <span class="hljs-keyword">const</span> &#123;...obj2&#125; = obj<br>        <span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><h1 id="拓展运算符-⭐⭐⭐"><a href="#拓展运算符-⭐⭐⭐" class="headerlink" title="拓展运算符(⭐⭐⭐)"></a>拓展运算符(⭐⭐⭐)</h1><p><strong>格式也是(…变量名)和剩余参数的区别是:这里是把数组,对象字符串,拆分开</strong>(原数组,原对象,原字符串是存在的)</p><p>例一:用来合并数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>arr1.push(...arr2);<span class="hljs-comment">//...arr2==&gt;1 2 3,这里把arr2拆分开再推到arr1中</span><br>       <span class="hljs-built_in">console</span>.log(arr1);<span class="hljs-comment">//[1,2,3,4,5,6]</span><br></code></pre></td></tr></table></figure><p>例二:拓展对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小米&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            height: <span class="hljs-number">120</span><br>        &#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>            weight: <span class="hljs-number">123</span>,<br>            color: <span class="hljs-string">&#x27;red&#x27;</span><br>        &#125;<br> <span class="hljs-built_in">console</span>.log(&#123;...obj,...obj2&#125;); <span class="hljs-comment">//注意:拓展对象的结果只能出现在&#123;&#125;里,别忘记大括号,这是一个新对象</span><br><br></code></pre></td></tr></table></figure><p>例三:拓展字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;helloworld&#x27;</span><br>     <span class="hljs-built_in">console</span>.log(...str); <span class="hljs-comment">//这里输出的是字符串中的每个字符</span><br></code></pre></td></tr></table></figure><p>例四:使用拓展运算符拓展字符串和伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> spans = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;span&#x27;</span>); <br>        <span class="hljs-keyword">const</span> arr = [...spans]<span class="hljs-comment">//把伪数组拓展成真实的数组</span><br>        arr.push(<span class="hljs-number">123</span>) <span class="hljs-comment">//只有数组可以使用原生方法,所有这里arr不是伪数组了</span><br>        <span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></table></figure><h1 id="模板字符串-⭐⭐⭐"><a href="#模板字符串-⭐⭐⭐" class="headerlink" title="模板字符串(⭐⭐⭐)"></a>模板字符串(⭐⭐⭐)</h1><ol><li><p><strong>使用反引号（``）</strong>代替单双引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`hello world`</span><br>        <span class="hljs-built_in">console</span>.log(str);<br><br></code></pre></td></tr></table></figure><p>2.<strong>使用 ${变量名或表达式}</strong> </p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小明&#x27;</span><br>       <span class="hljs-keyword">let</span> age = <span class="hljs-number">10</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>今年<span class="hljs-subst">$&#123;age&#125;</span>岁了`</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li><p>在模板字符串中可以放<strong>任意的表达式</strong> (*<em>如三元表达式, 函数调用, 逻辑运算符, +-</em>/…**)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;abc&#x27;</span>;<br>       <span class="hljs-keyword">let</span> str3 = <span class="hljs-string">`hello<span class="hljs-subst">$&#123;<span class="hljs-literal">true</span>?<span class="hljs-string">&#x27;yes&#x27;</span>:<span class="hljs-string">&#x27;no&#x27;</span>&#125;</span>----------<span class="hljs-subst">$&#123;foo()&#125;</span>`</span><br>       <span class="hljs-built_in">console</span>.log(str3);<br></code></pre></td></tr></table></figure></li><li><p><strong>模板字符串支持换行</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>           name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>           subject: <span class="hljs-string">&#x27;语文&#x27;</span>,<br>           score: <span class="hljs-string">&#x27;80&#x27;</span><br>       &#125;;<br>       <span class="hljs-keyword">let</span> str2 = <span class="hljs-string">`</span><br><span class="hljs-string">           &lt;tr&gt;</span><br><span class="hljs-string">             &lt;td&gt;<span class="hljs-subst">$&#123;obj.name&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">             &lt;td&gt;<span class="hljs-subst">$&#123;obj.subject&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">             &lt;td&gt;<span class="hljs-subst">$&#123;obj.score&#125;</span>&lt;/td&gt;</span><br><span class="hljs-string">           &lt;/tr&gt;`</span><br>       <span class="hljs-keyword">const</span> table = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;table&#x27;</span>);<br>       table.innerHTML = str2<br></code></pre></td></tr></table></figure><h1 id="数组的方法-⭐⭐⭐"><a href="#数组的方法-⭐⭐⭐" class="headerlink" title="数组的方法(⭐⭐⭐)"></a>数组的方法(⭐⭐⭐)</h1><h4 id="Array-from应用"><a href="#Array-from应用" class="headerlink" title="Array.from应用"></a><code>Array.from</code>应用</h4><ol><li><code>Array.from(param[, fn])</code> 把<strong>其他类型的数据转化为数组</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>            <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>            <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>            length: <span class="hljs-number">2</span><span class="hljs-comment">//length一定要带!!!!</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> str = <span class="hljs-built_in">Array</span>.from(obj)<br>        <span class="hljs-built_in">console</span>.log(str);<span class="hljs-comment">//[&#x27;a&#x27;,&#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure><p>2.(了解)第二个可选参数 <code>fn </code>用于对转化后的数组进行遍历修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>            <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>            <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>            length: <span class="hljs-number">2</span><span class="hljs-comment">//length一定要带!!!!</span><br>        &#125;<br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-built_in">Array</span>.from(obj, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(item);<span class="hljs-comment">//a  b</span><br>            <span class="hljs-keyword">return</span> item + <span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;)<br>onsole.log(arr2); <span class="hljs-comment">//[&#x27;a1&#x27;,&#x27;b1&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="数组find方法"><a href="#数组find方法" class="headerlink" title="数组find方法"></a>数组find方法</h4><ol><li><p>find 方法用于查找<strong>数组</strong>中<strong>符合条件的第一个元素</strong></p></li><li><p>返回值: 找到就<strong>返回这个元素</strong>, <strong>没有找到则返回 undefined</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">44</span>]<br>  <span class="hljs-comment">// 找出大于 10 的第一个元素</span><br>        <span class="hljs-comment">//其他方法区别:filter(所有符合条件的元素)some(返回布尔值)indexof(元素值)</span><br>       <span class="hljs-keyword">const</span> res = arr.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item &gt; <span class="hljs-number">10</span>);<br>       <span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//12</span><br><br></code></pre></td></tr></table></figure><h4 id="数组findindex方法"><a href="#数组findindex方法" class="headerlink" title="数组findindex方法"></a>数组<code>findindex</code>方法</h4><ol><li><p><code>findIndex() </code>方法用于查找<strong>数组</strong>中<strong>符合条件的第一个元素的索引</strong>，</p></li><li><p>返回值: 找到就<strong>返回当前元素的索引</strong>, <strong>没有找到返回 -1</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br><span class="hljs-comment">// 找元素中大于 10 的元素索引</span><br>        <span class="hljs-keyword">const</span> res = arr.findIndex(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">10</span>)<br>        <span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//索引:1</span><br></code></pre></td></tr></table></figure><h4 id="includes方法"><a href="#includes方法" class="headerlink" title="includes方法"></a>includes方法</h4><ol><li><p>includes() 方法判断数组是否包含给定的值</p></li><li><p>返回值: 如果包<strong>含则返回 true</strong>，<strong>否则返回 false</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br>   <span class="hljs-comment">// 判断数组中是否包含 44 这个元素</span><br>        <span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">44</span>));<br>        <span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">8</span>) != -<span class="hljs-number">1</span>); <span class="hljs-comment">//两个结果一样,可以视情况使用</span><br></code></pre></td></tr></table></figure><p>注意: 和其他查找方法的区别 ==&gt;  <strong>includes 只能接受一个固定值</strong>，<strong>不能接受一个函数</strong></p><h4 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h4><ol><li>map() 方法基于原数组去创建一个新数组</li><li>返回值: 新数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br>        <span class="hljs-keyword">const</span> str = arr2.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item / <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">console</span>.log(str);<span class="hljs-comment">//[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><h1 id="字符串方法-⭐⭐⭐"><a href="#字符串方法-⭐⭐⭐" class="headerlink" title="字符串方法(⭐⭐⭐)"></a>字符串方法(⭐⭐⭐)</h1><h4 id="startWidth和endWidth方法"><a href="#startWidth和endWidth方法" class="headerlink" title="startWidth和endWidth方法"></a><code>startWidth</code>和<code>endWidth</code>方法</h4><ol><li><code>startsWith() </code>方法：判断字符串是否以某些字符开头，返回 Boolean(布尔值)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello wrold&#x27;</span><br>        <span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&#x27;h&#x27;</span>)); <span class="hljs-comment">//这里可以也用正则表达式</span><br></code></pre></td></tr></table></figure><p>2.<code>endsWith()</code> 方法：判断字符串是否以某些字符结尾，返回 Boolean(布尔值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello wrold&#x27;</span><br><span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&#x27;wrold&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="repeat方法"><a href="#repeat方法" class="headerlink" title="repeat方法"></a>repeat方法</h4><p>1.<code>repeat(n) </code>方法：用于将某个字符串重复 n 次, 返回重复后的新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br>      str = str.repeat(<span class="hljs-number">10</span>)<br>      <span class="hljs-built_in">console</span>.log(str);/<span class="hljs-number">123123123</span>重复十次<br></code></pre></td></tr></table></figure><h1 id="set数据类型-⭐⭐⭐"><a href="#set数据类型-⭐⭐⭐" class="headerlink" title="set数据类型(⭐⭐⭐)"></a>set数据类型(⭐⭐⭐)</h1><p>定义:<code>es6 </code>中提供了新的数据结构 Set, <strong>它类似于数组，但所有的元素都是唯一的</strong>，<strong>没有重复值</strong></p><p>1.通过new set (数组)来创建</p><p>2.元素都是唯一的,出现重复的元素会自动过滤</p><p>3.<code>mySet.sizeset</code>是数据的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>        <span class="hljs-built_in">console</span>.log(mySet); <span class="hljs-comment">//set数据中的元素都是唯一的,出现重复的元素会自动过滤</span><br>        <span class="hljs-built_in">console</span>.log(mySet.size); <span class="hljs-comment">//set数据的长度</span><br></code></pre></td></tr></table></figure><h4 id="set的操作方法"><a href="#set的操作方法" class="headerlink" title="set的操作方法"></a>set的操作方法</h4><p>1.<code>set.add</code>()(向 set 结构中添加数据)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br>     mySet.add(<span class="hljs-number">8</span>); <span class="hljs-comment">//加在后面</span><br></code></pre></td></tr></table></figure><p>2.<code>set.delete()</code>(从 set 中删除元素)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br> mySet.delete(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>3.<code>set.has()</code>(从 set 中查找元素)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br> <span class="hljs-built_in">console</span>.log(mySet.has(<span class="hljs-number">6</span>));<span class="hljs-comment">//查找6这个元素,没有返回false</span><br></code></pre></td></tr></table></figure><p>4.<code>set.clear()</code>(清空所有元素)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br>mySet.clear()<br></code></pre></td></tr></table></figure><h4 id="set遍历数据"><a href="#set遍历数据" class="headerlink" title="set遍历数据"></a>set遍历数据</h4><ol><li><code>forEach() </code>方法遍历 set 数据中的每个元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br>  mySet.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(item));<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>for…of 方法遍历任何可迭代的数据( Set, 数组, Map, 字符串)</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;<br>        <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr2) &#123; <span class="hljs-comment">//遍历数组</span><br>            <span class="hljs-built_in">console</span>.log(item);<br>            <span class="hljs-keyword">if</span> (item == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> str) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br><br>        &#125;;<br></code></pre></td></tr></table></figure><p>3.也支持对象遍历,但是需要绕一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>          a: <span class="hljs-number">1</span>,<br>          b: <span class="hljs-number">2</span>,<br>          c: <span class="hljs-number">3</span><br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(obj)) &#123; <span class="hljs-comment">//遍历对象</span><br>          <span class="hljs-built_in">console</span>.log(item);<br>          <span class="hljs-built_in">console</span>.log(obj[item]);<br>      &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/23/jquery%E6%80%BB%E7%BB%93%E5%9B%9B/"/>
    <url>/2021/02/23/jquery%E6%80%BB%E7%BB%93%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h4 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h4><p>​    用于匹配字符串中字符组合的模式，在数据类型中是属于对象</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h4><p>​    通常用来校验、查找、替换指定规则的字符文本</p><ol><li><p>验证表单，如：只能输入英文、字母、数字和下划线</p></li><li><p>过滤页面内容中的敏感词汇，或者对指定字符组合进行替换 </p></li><li><p>从字符串中提取我们想要的特定部分</p></li></ol><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ol><li><p>灵活性、逻辑性和功能性 （强大）</p></li><li><p>简单高效</p></li><li><p>可读性稍差，不便于记忆（一般复制相关的正则表达式，修改后即可使用）</p></li></ol><h2 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h2><h4 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成:"></a>正则表达式的组成:</h4><p>  一个正则表达式可以由简单的字符构成，比如 /123/, 也可以是简单和特殊字符的组合，比如：<code>/^abc/</code> 其中，特殊字符又叫元字符，是在表达式中有特殊意义的字符，如 ^, $, . 等</p><h4 id="边界符-1"><a href="#边界符-1" class="headerlink" title="边界符:"></a>边界符:</h4><p> 主要用来匹配字符的开始和结束位置:</p><p>​      (1) ^: 用来匹配以…开头</p><p>​      (2) $: 用来匹配以…结尾</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><p> (1) 不使用 ^ 和 $ 表示只要字符串中包含匹配的内容就返回 true, 可以多出其他任意字符</p><p> (2) ^ 和 $ 在一起配合使用，表示是精确匹配, 不能多出其他字符也不能少 (必须满足数量和类型都一致)</p><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类:"></a>字符类:</h2><h4 id="一、字符集合"><a href="#一、字符集合" class="headerlink" title="一、字符集合:"></a>一、字符集合:</h4><p>​      表示匹配字符集合中的任意字符，中括号中只要有任意一个字符出现在字符串就满足规则</p><h4 id="二、中括号中的特殊字符自动转义"><a href="#二、中括号中的特殊字符自动转义" class="headerlink" title="二、中括号中的特殊字符自动转义:"></a>二、中括号中的特殊字符自动转义:</h4><p>用破折号（-）来指定一个字符范围，如：<code>[c-f1-3A-D]</code></p><h4 id="三、反向字符集合"><a href="#三、反向字符集合" class="headerlink" title="三、反向字符集合"></a>三、反向字符集合</h4><p><code>[^xyz]</code> 表示匹配没有包含在字符集合中的字符，字符串中只要有一个不在中括号内的字符就满足规则 </p><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><p> 对于点（.）和星号（*）这样的特殊符号中括号中自动转义为原本的意义</p><h4 id="正则表达式中预定义类"><a href="#正则表达式中预定义类" class="headerlink" title="正则表达式中预定义类"></a>正则表达式中预定义类</h4><p>\d：匹配 0~9 之间的任意一个数字，等价于 [0-9]</p><p>\D: 匹配所有 0~9 之外的字符，等价于<code> [^0-9]</code></p><p>\w: 匹配任意的字母、数字和下划线，等价于 <code>[a-zA-Z0-9_]</code></p><p>\W: 匹配任意的字母、数字和下划线之外的字符，等价于 <code>[^0-9a-zA-Z_]</code></p><p>\s: 匹配所有的空格（包括换行符，制表符，空格符等），等价于 [\t\r\n\v\f]</p><p>\S：匹配所有的非空格符，等价于<code> [^\t\r\n\v\f]</code></p><h2 id="正则表达式查找和替换"><a href="#正则表达式查找和替换" class="headerlink" title="正则表达式查找和替换"></a>正则表达式查找和替换</h2><h4 id="一、字符串中的替换"><a href="#一、字符串中的替换" class="headerlink" title="一、字符串中的替换"></a>一、字符串中的替换</h4><p>​      replace(reg, 替换后的字符) 可以替换字符串中的字符，参数可以是普通字符串，也可以是正则表达式</p><h4 id="二、正则表达式参数-表达式-参数"><a href="#二、正则表达式参数-表达式-参数" class="headerlink" title="二、正则表达式参数 /表达式/参数"></a>二、正则表达式参数 /表达式/参数</h4><p>指定匹配的模式：</p><p>​      （1）/表达式/g   全局匹配</p><p>​      （2）/表达式/i   忽略大小写进行匹配</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%B8%89/"/>
    <url>/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="函数的定义方法"><a href="#函数的定义方法" class="headerlink" title="函数的定义方法:"></a>函数的定义方法:</h1><p>1.函数声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>        &#125;<br>        foo();<br></code></pre></td></tr></table></figure><p>2.匿名函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;gogogo&#x27;</span>);<br>       &#125;<br>       fn();<br></code></pre></td></tr></table></figure><p>3.利用function方法构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;console.log(a+b)&#x27;</span>)<br>       bar(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><ol><li>普通函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>);<br><br>       &#125;<br><br>       fn();<br><br></code></pre></td></tr></table></figure><p>​        //2. 对象中的函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br><br>          say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><br>          &#125;<br><br>      &#125;<br><br>      obj.say();<br><br></code></pre></td></tr></table></figure><p>​        //3. 构造函数的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br><br>         <span class="hljs-built_in">this</span>.name = name<br><br>         <span class="hljs-built_in">this</span>.age = age<br><br>     &#125;<br><br>     <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>)<br><br></code></pre></td></tr></table></figure><ol start="4"><li>绑定事件的处理函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bar = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>)<br><br>      bar.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;点击&#x27;</span>);<br><br>      &#125;);<br><br></code></pre></td></tr></table></figure><ol start="5"><li><p>定时器的处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;345&#x27;</span>);<br><br><br><br>        &#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure></li></ol><p>6.立即执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>            <span class="hljs-comment">//提供了一个局部作用域,和外界的变量名不会冲突</span><br><br>            <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span><br><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br><br>        &#125;)()<br><br></code></pre></td></tr></table></figure><h1 id="改变this指向的三种方法"><a href="#改变this指向的三种方法" class="headerlink" title="改变this指向的三种方法"></a>改变this指向的三种方法</h1><h2 id="一、call-方法"><a href="#一、call-方法" class="headerlink" title="一、call 方法"></a>一、call 方法</h2><p>​      <code>fn.call</code>([<code>thisArg</code>, <code>arg1</code>, <code>arg2</code>…])</p><p>​      作用：调用一个函数，并指定调用时 this 的值</p><p>​      参数: <code>thisArg</code> 函数中 this 的指定值(输入谁指向谁)； <code>arg1,</code> <code>arg2</code>…(传入的实参)</p><p>​      返回值：函数调用的结果</p><p>​    二、注意</p><p>​      第一个参数 <code>thisArg</code> 如果不传或是 null、undefined，默认函数内 this 指向 window </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>           <span class="hljs-built_in">console</span>.log(a);<br>       &#125;<br>       fn.call(&#123;<br>           name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>           age: <span class="hljs-number">12</span><br>       &#125;, <span class="hljs-number">10</span>);<br><br>       <span class="hljs-comment">//call方法应用构造函数的属性继承</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>           <span class="hljs-built_in">this</span>.x = x<br>           <span class="hljs-built_in">this</span>.y = y<br>       &#125;<br><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>           <span class="hljs-comment">//调用父构造函数,并把父构造函数中的this修改为子类的this</span><br>           Father.call(<span class="hljs-built_in">this</span>, x, y)<br>       &#125;<br>       <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h2 id="一、apply-方法"><a href="#一、apply-方法" class="headerlink" title="一、apply 方法"></a>一、apply 方法</h2><p>​     <code> fn.apply(thisArg[, argsArray])</code></p><p>​      作用：调用一个函数，并指定调用时 this 的值</p><p>​      参数: <code>thisArg</code> 函数中 this 的指定值(输入谁指向谁)；<code>argsArray </code>可选的参数数组(传入的一定是一个数组)</p><p>​      返回值：函数调用的结果</p><p>​    二、apply 应用</p><p>​      由于可以接受一个参数数组，所以对于数组元素的遍历操作可以使用 apply;</p><p>​      在可以使用 call 的情况下， 都可以使用 apply 替代 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>           <span class="hljs-built_in">console</span>.log(a + b);<br>       &#125;<br><br>       fn.call(&#123;&#125;, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>       <span class="hljs-comment">//使用apply去改变this指向</span><br>       fn.apply(&#123;&#125;, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br>       <span class="hljs-comment">//1.使用apply去判断一组数的最大值</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.max(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>       <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">40</span>, <span class="hljs-number">2</span>];<br>       <span class="hljs-comment">//使用null作为第一个参数,表示不关心this指向,默认window</span><br>       <span class="hljs-comment">//apply可以把第二个参数 数组 转成逗号分隔的参数进行传递</span><br>       <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, arr)<br>       <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h2 id="三、bind-方法"><a href="#三、bind-方法" class="headerlink" title="三、bind 方法"></a>三、bind 方法</h2><p>​      var <code>newFn = fn.bind(thisArg[, arg1, arg2, ...])</code></p><p>​      作用：<strong>基于原函数创建一个新函数</strong>，这个新函数的 this 被指定为第一个参数， 其余参数作为实参传递给新函数</p><p>​      参数：<code>thisArg</code> 是新函数内 this 的预设值;<code> arg1, arg2</code> 是新函数预设传入的参数(这里传入的实参就是新数组的预定参数)</p><p>​      返回值: <strong>新函数</strong></p><p>​    二、bind 作用</p><p>​      (1) 创建一个函数，不论怎么调用，这个函数都有同样的 this 值</p><p>​      (2) 使一个函数拥有预设的初始参数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-built_in">console</span>.log(a + b);<br>        &#125;<br>        <span class="hljs-comment">//bind是用来创建新函数的,并且可以为新函数预先指定传入的实参</span><br>        <span class="hljs-keyword">var</span> newFn = fn.bind(&#123;&#125;, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>        newFn() <span class="hljs-comment">//新函数中的this已经被修改成&#123;&#125;</span><br>        fn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">//原函数中的this仍然指向window</span><br></code></pre></td></tr></table></figure><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>一、什么是严格模式 （了解）</p><p>​      采用具有限制性JavaScript变体的一种方式，摆脱了以前的松散模式</p><ol><li><p>消除了<code> js</code> 代码的不合理和不严谨地方，减少怪异行为</p></li><li><p>消除了代码的不安全地方，保证代码安全运行</p></li><li><p>提高编译器的效率，增加运行的速度</p></li><li><p>禁用 <code>ECMAScript </code>未来版本中可能会定义的一些语法 class extends super 等</p></li></ol><p>​    二、严格模式的应用</p><ol><li>为整个 <code>js </code>文件开启严格模式, 即在代码开头添加 ‘use strict’;</li></ol><p>​      2. 为某个函数</p><h1 id="严格模式中的变化"><a href="#严格模式中的变化" class="headerlink" title="严格模式中的变化"></a>严格模式中的变化</h1><ol><li>变量未声明不能直接赋值</li></ol><p>​    </p><ol start="2"><li>变量必须先声明再使用</li></ol><ol start="4"><li>函数内的 this 默认指向 undefined</li></ol><ol start="5"><li>非函数内的 this 默认指向 undefined</li></ol><ol start="6"><li>构造函数和类只能加 new 进行使用</li></ol><ol start="7"><li>函数中的参数名不能重名 </li></ol><ol start="8"><li>不允许在非函数的代码块内声明函数 (chrome 浏览器没有实现) </li></ol><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>高阶函数是对其他函数进行操作的函数，主要有两种类型的高阶函数：</p><ol><li><p>把函数作为参数的函数</p></li><li><p>把函数作为返回值的函数 </p></li></ol><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>​    一、闭包的概念 </p><p>​      内部函数访问外部函数声明的变量，这种组合方式就是闭包</p><p>​    二、<code>JS</code> 中的垃圾回收机制(<code>GC</code>)</p><p>​      垃圾回收机制会定期（周期性）找出那些不再引用到的内存（变量），然后释放其内存</p><p>​    三、闭包产生的原因</p><p>​     (1) 当一个函数内的声明的变量没有被其他函数引用时，那么调用完这个函数后，</p><p>​      所有的局部变量就会被垃圾回收机制清除；</p><p>​     (2) 一旦这个变量被另外一个函数所引用，这个变量的值会始终保存在内存中，</p><p>​      不会被垃圾回收机制回收，从而形成了闭包 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//外部函数</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span><br><br>           <span class="hljs-comment">//内部函数</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(++num);<br><br>           &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">var</span> res = foo()<br>       <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//这里res是bar 这个函数</span><br><br>       res() <span class="hljs-comment">//原因:返回的bar这个函数被全局的res所引用,所以bar不会被删除;由于bar函数中引用了num</span><br>           <span class="hljs-comment">//所以num这个变量在foo调用完成后也不会被删除</span><br>       res() <span class="hljs-comment">//这里是12</span><br></code></pre></td></tr></table></figure><h1 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h1><p>​    一、闭包的作用</p><p>​      （1）<strong>延伸了变量的使用范围</strong></p><p>​      （2）<strong>实现了数据的封装</strong></p><p>​      （3）<strong>实现了数据的缓存（函数的柯里化）</strong></p><p>​    二、闭包的缺点 (了解)</p><p>​      (1) 闭包会使得函数中的变量都被保存在内存中，<strong>加大了内存消耗</strong> (空间换时间)</p><p>​      (2) <strong>容器引发内存泄漏</strong> (内存没有及时清理)</p><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>一、递归函数</p><p>​      函数内部自己调用自己，作用和循环效果类似 </p><p>​    二、递归的注意事项</p><p>​      递归很容易发生 “栈溢出” 错误，所以和 while 循环</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%BA%8C/"/>
    <url>/2021/02/23/jquery%E6%80%BB%E7%BB%93%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象:"></a><strong>构造函数创建对象</strong>:</h3><p>1.构造函数创建对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name,age,height</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name<br>    <span class="hljs-built_in">this</span>.age=age<br>    <span class="hljs-built_in">this</span>.height=height<br>    <span class="hljs-built_in">this</span>.say=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.字面量创建对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    name:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>    age:<span class="hljs-number">12</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>new Object创建对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>       obj2.name = <span class="hljs-string">&#x27;小明&#x27;</span><br>       obj2[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">12</span><br>       <span class="hljs-built_in">console</span>.log(obj2)<br></code></pre></td></tr></table></figure><p><strong>静态成员和实例成员</strong>:</p><p><strong>实例成员</strong>:把在this上添加的属性和方法叫做静态成员,只能通过构造函数本身才能访问, 只能通过实例对象才能访问的属性或方法</p><p><strong>静态成员</strong>:给构造函数添加的属性和方法叫做静态成员, 只能通过构造函数本身才能访问的属性或方法</p><h1 id="构造函数的原型对象-prototype"><a href="#构造函数的原型对象-prototype" class="headerlink" title="构造函数的原型对象(prototype)"></a>构造函数的原型对象(prototype)</h1><p><strong>一</strong>.  构造函数中直接添加方法的缺点:</p><p>每次创建对象,需要重复开辟内存空间,浪费空间</p><p><strong>二</strong>.构造函数的原型对象prototype:</p><p>1.<strong>每个函数</strong>都有<strong>prototype属性</strong>,它是一个<strong>对象</strong></p><p>2.在 prototype 对象上的<strong>方法</strong>和<strong>属性</strong>, 会<strong>被 new 构造函数()</strong> <strong>创建出来</strong>的<strong>实例对象所继承</strong></p><p><strong>三</strong>.</p><p> (1) 只要是函数就默认有 prototype 属性, 但<strong>非函数</strong>的<strong>对象是不具有</strong>的</p><p>  (2) 定义构造函数时, <strong>公共的方法定义在原型对象上</strong>, 这样可以被<strong>所有创建出来的实例直接继承</strong></p><h1 id="构造函数的对象原型-proto"><a href="#构造函数的对象原型-proto" class="headerlink" title="构造函数的对象原型(--proto--)"></a>构造函数的对象原型(<code>--proto--</code>)</h1><p><strong>一</strong>、对象的原型</p><p>​    <strong>每个对象</strong>都默认有一个 -<code>-proto</code>–的属性, 它的<strong>值是一个对象</strong>, 默认<strong>指向创建这个对象</strong>的<strong>构造函数的原型</strong>(创建这个对象的构造函数的prototype)</p><p> <strong>二</strong>、对象原型的访问特点</p><p>​     每个对象访问 –<code>proto</code>– 下的所有属性和方法，可以省略–<code>proto</code>–</p><p>  <strong>三</strong>、对象上读取属性的顺序</p><p>​      先从自身的属性上进行查找，如果没有再去 –<code>proto</code>– 属性指向的对象上去查找(就近原则)</p><h1 id="constructor构造函数"><a href="#constructor构造函数" class="headerlink" title="constructor构造函数"></a><strong>constructor构造函数</strong></h1><p><strong>一</strong>.<strong>每个构造函数</strong>的<strong>原型</strong>上(prototype),默认<strong>都有一个constructor属性</strong>,它<strong>指向构造函数本身</strong></p><p><strong>二</strong>.当我们<strong>重新建立</strong>一个对象去<strong>覆盖原先</strong>的prototype时,constructor属性需要我们<strong>手动添加</strong></p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name<br>            <span class="hljs-built_in">this</span>.age = age<br>            <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span>);<br>            &#125;<br>        &#125; <br>Student.prototype = &#123;<br>            <span class="hljs-title">constructor</span>: <span class="hljs-title">Student</span>,//&lt;==别忘添加<br>            <span class="hljs-title">say</span>: <span class="hljs-title">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>            &#125;,<br>            sleep: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sleep&#x27;</span>);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>原型链理解（面试常问）</p><p>  每个实例对象（ object ）都有一个私有属性（称之为 –<code>proto</code>–）指向创建它的构造函数的原型对象（prototype ）。</p><p>  该原型对象也有一个自己的原型对象( –<code>proto</code>– ) ，层层向上直到一个对象的原型对象为 null。</p><p>注意: 根据定义，null 没有原型，并作为这个原型链中的最后一个环节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name<br>    <span class="hljs-built_in">this</span>.age=age<br>&#125;<br>Father.prototype=&#123;<br>    <span class="hljs-title">constructor</span>:<span class="hljs-title">Father</span><br>    <span class="hljs-title">say</span> :<span class="hljs-title">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> ace =<span class="hljs-keyword">new</span> Father(<span class="hljs-string">&#x27;小明&#x27;</span><span class="hljs-number">12</span>)<br><span class="hljs-comment">//ace.--proto--==&gt;Father.prototype==&gt;</span><br><span class="hljs-comment">//Father.prototype.__proto__==&gt;Object.prototype==&gt;</span><br><span class="hljs-comment">//Object.prototype.__proto__==&gt;null</span><br></code></pre></td></tr></table></figure><p> <strong>对象访问属性时遵从原型链的顺序</strong></p><p>​    (1) 当访问一个对象的属性时，首先从这个对象自身进行查找(先自身再往上)</p><p>​    (2) 如果没有找到就从它的原型对象（–<code>proto</code>–）中查找</p><p>​    (3) 如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null,都没有就undefined</p><p><img src="C:\Users\1874750235\Desktop\笔记和作业截图\课堂笔记\原型链.png"></p><h1 id="原型对象中this的指向"><a href="#原型对象中this的指向" class="headerlink" title="原型对象中this的指向"></a>原型对象中this的指向</h1><p>1.函数中this默认指向函数的调用者</p><p>2.构造函数里的this指向实例对象</p><p>3.全局作用域下指向window</p><h1 id="class总结-对象原型-原型对象-construtor"><a href="#class总结-对象原型-原型对象-construtor" class="headerlink" title="class总结(对象原型,原型对象,construtor)"></a>class总结(对象原型,原型对象,<code>construtor</code>)</h1><p>es6 之前构造函数的特点:</p><ol><li><p>构造函数默认有一个 prototype 属性, 它的值是一个对象</p></li><li><p>构造函数 prototype 属性下有 constructor 和 –<code>proto</code>–两个默认的属性</p></li><li><p>构造函数可以通过在 prototype 上添加方法, 去实现所有实例继承</p></li><li><p>构造函数创建的实例上 –<code>proto</code>–指向创建它构造函数的 prototype</p></li></ol><h1 id="修改this指向的方法"><a href="#修改this指向的方法" class="headerlink" title="修改this指向的方法"></a>修改this指向的方法</h1><h3 id="call方法"><a href="#call方法" class="headerlink" title="call方法:"></a><strong>call方法</strong>:</h3><ol><li><p>call 和 apply 方法可以<strong>修改函数调用时 this 的指向</strong>（面试常问 !!!）</p></li><li><p>call 方法可以去调用函数，并修改函数中 this 指向</p><p>格式： fn . call ([对象, 参数])</p></li></ol><p>注意: call 方法的<strong>第一个参数</strong>就是用来<strong>改变函数调用时的 this 指向</strong>, <strong>后面的参数</strong>才是正常调用函数<strong>传递的实参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-built_in">console</span>.log(a + b + c);<br>        &#125;<br>fn()<span class="hljs-comment">//&lt;==这里this指向window</span><br>fn.call([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">//&lt;==此时this指向数组[1,2,3]</span><br></code></pre></td></tr></table></figure><h1 id="ES-5数组新增方法"><a href="#ES-5数组新增方法" class="headerlink" title="ES 5数组新增方法"></a>ES 5数组新增方法</h1><p>一.</p><p>   <strong>forEach()</strong> 方法可以快速地遍历数组</p><p>   参数：callback(元素, 索引, 数组本身)</p><p>   返回值：无</p><p>   注意:forEach() 方法不会终止整个遍历(不管如何都会完整地遍历数组)</p><p>   例子: 使用 forEach 对数组求和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>      arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">itme, index, arr</span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(itme)<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;索引号:&#x27;</span> + index)<br>      &#125;)<br></code></pre></td></tr></table></figure><p>二.</p><p><strong>filter()</strong> 方法从数组筛选出符合条件的一组元素</p><p>参数：callback(元素, 索引, 数组本身)</p><p>返回值：新数组</p><p>注意:filter() 方法也不会终止整个遍历, 用来筛选符合条件的所有元素</p><p>例子: 使用 filter 筛选数组中所有偶数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>       <span class="hljs-keyword">var</span> newArr = arr2.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">itme</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> itme % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>       &#125;)<br>       <span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><p>三</p><p><strong>some()</strong> 方法用于查找数组中<strong>是否有符合条件的某一个元素</strong></p><p><strong>参数</strong>：callback(元素, 索引, 数组本身)</p><p><strong>返回值</strong>：true(找到) || false(找不到)</p><p><strong>注意</strong>:some() 方法判断数组中是否有唯一符合条件的元素, 遇到 return true 会终止整个遍历</p><p>举例: 使用 some 方法判断一组字符数组中是否有空字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br>       <span class="hljs-keyword">var</span> res2 = arr2.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">itme</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> itme == <span class="hljs-string">&#x27;&#x27;</span><br>       &#125;)<br>       <span class="hljs-built_in">console</span>.log(res2);<br></code></pre></td></tr></table></figure><p>四.</p><p><strong>every()</strong> 方法用于查找数组中是否所有的元素都符合条件</p><p>参数：callback(元素, 索引, 数组本身)</p><p>返回值：true || false (只有有一个不满足就返回 false)</p><p>注意:every() 方法用于判断数组中是否所有的元素都符合条件, return false 会终止整个遍历过程</p><p>举例: 使用 every 方法判断数组中是否所有数字都大于 20</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>]<br>        <span class="hljs-keyword">var</span> res3 = arr3.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">itme</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> itme &gt; <span class="hljs-number">20</span><br>        &#125;)<br>        <span class="hljs-built_in">console</span>.log(res3);<br></code></pre></td></tr></table></figure><h1 id="Object-keys方法获取属性名"><a href="#Object-keys方法获取属性名" class="headerlink" title="Object . keys方法获取属性名"></a><strong>Object . keys方法获取属性名</strong></h1><ol><li><p>使用 Object. keys() 方法获取对象上所有的属性名</p><p>返回值：所有属性名组成的数组</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>            a: <span class="hljs-number">1</span>,<br>            b: <span class="hljs-number">2</span>,<br>            c: <span class="hljs-number">3</span><br>        &#125;<br><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">Object</span>.keys(obj)<br><span class="hljs-built_in">console</span>.log(res);<br>res.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(obj[item]);<span class="hljs-comment">//获取属性名对应的值,注意这里使用[],不能不使用.</span><br>   &#125;)<br></code></pre></td></tr></table></figure><h1 id="Object-defineProperty-方法"><a href="#Object-defineProperty-方法" class="headerlink" title="Object. defineProperty () 方法"></a>Object. <code>defineProperty</code> () 方法</h1><p>一、Object. define Property() 方法的作用：[ V U E 响应式的核心 2 . x]</p><p>​      在对象上定义一个新属性，或者修改原属性，并返回对象</p><p>​    </p><p>​    二、使用方法：</p><p>​      Object. define Property(obj, prop, descriptor)</p><p>​      (1) obj: 要定义属性的对象</p><p>​      (2) prop: 要定义或修改的属性的名称, 字符串 ‘name’</p><p>​      (3) descriptor: 要定义或修改的属性描述符, 数据格式是对象 {}</p><p>​    三、属性的描述符</p><p>​      (1) value: 属性值 </p><p>​      (2) writable: 是否可以修改</p><p>​      (3) enumerable: 是否可以枚举（遍历到）</p><p>​      (4) configurable: 是否可以删除或再次修改特性</p><p>​      三个属性描述符默认都是 false </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            sex: <span class="hljs-string">&#x27;man&#x27;</span><br>        &#125;<br>  <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;height&#x27;</span>, &#123;<br>       value: <span class="hljs-string">&#x27;170&#x27;</span>,<br>       writable: <span class="hljs-literal">true</span>, <span class="hljs-comment">//true时是可以修改,false时是不可修改</span><br>       enumerable: <span class="hljs-literal">true</span>, <span class="hljs-comment">//true时是可以遍历到,false时是不可遍历到</span><br>       configurable: <span class="hljs-literal">true</span> <span class="hljs-comment">//true时是可以删除,false时是不可删除</span><br>       &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E4%B8%AD%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/22/npm%E4%B8%AD%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="npm中模块的加载机制"><a href="#npm中模块的加载机制" class="headerlink" title="npm中模块的加载机制"></a><code>npm</code>中模块的加载机制</h2><h4 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a><strong>模块的加载机制</strong></h4><p>一、模块优先从缓存中进行加载 </p><p>​      模块在第一次加载后会被缓存, 如果每次调用 require(‘<code>foo</code>‘) 都解析到同一文件，则返回相同的对象,不会导致模块的代码被执行多次</p><p> 二、缓存的作用</p><p>​     不论是<code> node.js</code> 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率</p><p><strong>总结:当模块被加载后,之后多次加载都无效.因为缓存机制</strong></p><h4 id="内置模块的加载机制"><a href="#内置模块的加载机制" class="headerlink" title="内置模块的加载机制"></a><strong>内置模块的加载机制</strong></h4><p>​    一、核心模块的加载机制 </p><p>​      require() 总是会优先加载核心模块, 比如 require(‘<code>http</code>‘) 始终返回内置的 HTTP 模块，即使有同名文件</p><p><strong>总结:第三方模块和核心模块同名优先加载核心模块</strong></p><h4 id="自定义模块的加载机制"><a href="#自定义模块的加载机制" class="headerlink" title="自定义模块的加载机制"></a><strong>自定义模块的加载机制</strong></h4><p>​    一 、 使用 require() 方法去加载自定义模块，必须指定 ‘/‘、 ‘./‘ 或 ‘../‘ 开头的路径，如果没有这个</p><p>​    路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块</p><p>​    二、自定义文件模块</p><p>​      如果按确切的文件名没有找到模块，则 <code>Node.js</code> 会尝试带上 <code>.js</code>、<code> .json</code> 或 .node 拓展名再加载</p><p>​    三、自定义目录模块</p><p>​      当传递一个目录标识符给 require () 方法时, 加载的顺序如下:</p><ol><li><p>在加载的目录下查找 <code>package.json </code>的文件, 并寻找 main 属性作为 require 的入口</p></li><li><p>上述找不到,  <code>Node.js </code>将会试图加载目录下的<code> index.js</code> 或<code> index.node</code> 文件</p></li></ol><p><strong>总结:没有确切的文件后缀时,<code>Node.js</code>会按照 <code>.js .json</code> .node给文件添加并且查找如果都没有就报错</strong></p><h4 id="第三方模块的加载机制"><a href="#第三方模块的加载机制" class="headerlink" title="第三方模块的加载机制"></a>第三方模块的加载机制</h4><p>​      如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头，</p><p>​    那么 <code>Node.js</code> 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，</p><p>​    则移动到再上一层父目录，直到文件系统的根目录。</p><p><strong>总结:一层一层查找只要找到就使用,找不到就报错.从当前目录到c盘根目录</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E6%8C%87%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="npm指令"><a href="#npm指令" class="headerlink" title="npm指令"></a>npm指令</h2><p>下载一个指定的包 :npm i 包的具体名称</p><p>查看一个指定包:npm view 包的具体名称</p><p>下载指定版本的包:npm i 包的具体名称@版本号</p><p>创建包管理配置文件:npm init -y</p><p>卸载指定的包 :npm uninstall 包名称</p><p>安装测试阶段用到的包:npm i -D 包名称@版本号</p><p>全局包：</p><p> 安装命令： npm i -g 包名称</p><p>卸载命令： npm uninstall -g 包名称</p><p>使用 nrm 切换源:      </p><p>在任意目录下依次执行：<code>npm i -g nrm</code> ==&gt; <code>nrm ls</code> ==&gt;<code>nrm use taobao</code>(已有的就不需要下载nrm)</p><p>发布包的步骤:</p><ol><li>编写包的说明文档 </li></ol><p>​      在包的根目录下添加文件 README.md 文件</p><ol start="2"><li>注册一个 npm 账号</li></ol><p>​      打开注册网址: <a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a></p><ol start="3"><li>pc端打开注册邮箱进行确认</li></ol><p>​      点击蓝色按钮 Verify Email</p><ol start="4"><li>在包的发布目录下面执行命令</li></ol><p>​      <code>npm publish</code></p><ol start="5"><li>删除已经发布的包</li></ol><p>​      <code>npm unpublish 包名称 --force</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
